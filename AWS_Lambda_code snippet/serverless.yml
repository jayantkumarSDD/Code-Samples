
service: billing

plugins:
  - serverless-webpack
  - serverless-offline
  
provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  runtime: ${self:custom.env.runtime}
  timeout: ${self:custom.env.timeout}
  memorySize: ${self:custom.env.memorySize}
  deploymentBucket:
    name: ${self:custom.env.deploymentBucketName} # Deployment bucket name. Default is generated by the framework
    serverSideEncryption: AES256 # when using server-side encryption
  environment:
    stage: ${self:provider.stage}
    xeroKey: ${self:custom.xero.consumerKey}
    xeroSceret: ${self:custom.xero.consumerSecret}
    xeroCallbackUrl: ${self:custom.xero.callbackUrl}
    xeroPrivateKey: ${self:custom.xero.privateKeyString}

  region: ${self:custom.env.region}
  profile: ${self:custom.env.profile}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:Scan
        - dynamodb:Query
      Resource: "arn:aws:dynamodb:eu-west-1:*:table/${self:provider.stage}_*" #Restricting dynamoDB action for self enviroment

custom:
  webpack:
    webpackConfig: '../../webpack.config.js'
    includeModules:
      packagePath: '../../package.json'
  region: ${opt:region, self:custom.env.region}
  env: ${file(../../config/config.${self:provider.stage}.yml):CREDS}
  xero: ${file(../../config/config.${self:provider.stage}.yml):xeroApi}
  
  apiPrefix: "/api/billing/"
  functionPrefix: "${self:provider.stage}-billing"

functions:
  getItems:
    name: "${self:custom.functionPrefix}getItems"
    handler: handler.getItems
    events:
      - http:
          path: ${self:custom.apiPrefix}get-items/{id}
          method: get
          cors: true
          authorizer: 
            name: authorizer
            arn: ${self:custom.env.arn}
  getBillingInfo:
    name: "${self:custom.functionPrefix}getBillingInfo"
    handler: handler.getBillingInfo
    events:
      - http:
          path: ${self:custom.apiPrefix}get-billing-info
          method: get
          cors: true
          authorizer: 
            name: authorizer
            arn: ${self:custom.env.arn}
  getItem:
    name: "${self:custom.functionPrefix}getItem"
    handler: handler.getItem
    events:
      - http:
          path: ${self:custom.apiPrefix}get-item/{id}
          method: get
  createXeroContact:
    name: "${self:custom.functionPrefix}-createXeroContact"
    handler: handler.createXeroContact
    events:
      - http:
          path: ${self:custom.apiPrefix}create-xero-contact
          method: post
          cors: true
          authorizer: 
            name: authorizer
            arn: ${self:custom.env.arn}
